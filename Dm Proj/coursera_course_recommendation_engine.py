# -*- coding: utf-8 -*-
"""coursera-course-recommendation-engine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U5zB41vc3BQPXAc1gj1GQwMx3SV6BGvq

# Coursera Course Recommendation Engine and VisualizationðŸ“š

## 1. Importing necessary libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from pickle5 import pickle
import json

sns.set_style('darkgrid')
plt.style.use('fivethirtyeight')
print("The necessary packages are included successfully!")

"""## 2. Importing the dataset"""

df = pd.read_csv('Coursera.csv')
df.head()

def datainjson():
    json_data = df.head(100).to_json(orient='records')
    return json_data

print(datainjson())

"""## 4. Data Inferencing"""

r,c = df.shape
print("Number of customers  = ",r)
print("Number of parameters = ",c)

df.info()

"""## 5. NULL Removal / Checking"""

print("Are there any missing values in the dataset ?",df.isna().values.any())

# complete summary of dataset
df.describe().T

"""## 6. Data Visualization"""

data = df['Difficulty Level'].value_counts()
data

mag = ['Beginner','Advanced','Intermediate','Conversant','Not Calibrated']
  
data = [1444,1005,837,186,50]
explode = (0.1,0.0,0.0,0.0,0.0) 
  
# Creating color parameters 
colors = ("lightblue","crimson","yellow","green","violet") 
  
# Wedge properties 
wp = { 'linewidth' : 1, 'edgecolor' : "white" } 
  
# Creating autocpt arguments 
def func(pct, allvalues): 
    absolute = int(pct / 100.*np.sum(allvalues)) 
    return "{:.1f}%\n({:d} g)".format(pct, absolute) 
  
# Creating plot 
fig, ax = plt.subplots(figsize =(15, 10)) 
wedges, texts, autotexts = ax.pie(data,  
                                  autopct = lambda pct: func(pct, data), 
                                  explode = explode,  
                                  labels = mag, 
                                  shadow = True, 
                                  colors = colors, 
                                  startangle = 90, 
                                  wedgeprops = wp, 
                                  textprops = dict(color ="black")) 
  
# Adding legend 
ax.legend(wedges, mag, 
          title ="Values", 
          loc ="center left", 
          bbox_to_anchor =(1, 0, 0.5, 1)) 
  
plt.setp(autotexts, size = 10, weight ="bold") 
ax.set_title("Payment type of course\n",size=19) 
  
# show plot 

plt.show()

df['Course Rating'].value_counts()

df = df[df['Course Rating'] != 'Not Calibrated']

df['Course Rating'] = df['Course Rating'].astype(float)
df

plt.figure(figsize=(18,7))
sns.countplot(data=df,x='Course Rating',palette='plasma')
plt.xlabel('Course Ratings',fontsize='16',color='blue')
plt.ylabel('Number of courses',fontsize='16',color='blue')
plt.xticks(fontsize='14',color='green')
plt.yticks(fontsize='14',color='red')
plt.title("Count of course types\n",fontsize=24,fontweight='bold',color='indigo')

"""## 7. Filterning required data"""

df2 = df[df['Course Rating'] > 4.0]
df2.head(10)

"""## 8. Making NLP Model for Recommendation Engine"""

cv=TfidfVectorizer()
tfidf_matrix=cv.fit_transform(df['Course Name'])
course_user = df.pivot_table(columns='Course Name',values='Course Rating')
course_user.head()

df = df.rename(columns={'Course Name':'course_title'})

"""## 9. Running Recommendation Engine on variety of course genres"""

def recommendations(course_title):
    idx = indices[course_title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    course_indices = [i[0] for i in sim_scores]
    return titles.iloc[course_indices]

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices=pd.Series(df.index,index=df['course_title'])
titles=df['course_title']
print("--------------- Similar courses to your search --------------:\n")
recommendations('Write A Feature Length Screenplay For Film Or Television')

"""### TOPIC : 2 Database and related courses """

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices=pd.Series(df.index,index=df['course_title'])
titles=df['course_title']
print("--------------- Similar courses to your search --------------:\n")
print(recommendations('Retrieve Data using Single-Table SQL Queries'))

"""### TOPIC : 3 Finance related"""

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices=pd.Series(df.index,index=df['course_title'])
titles=df['course_title']

print("--------------- Similar courses to your search --------------:\n")
recommendations('Finance for Managers')



coursedatas = json.loads(datainjson())

for i in range(0,len(coursedatas)):
  recommendationsdata = recommendations(coursedatas[i]["course_title"])
  coursedatas[i]["recommendations"] = recommendationsdata.to_list()


pickle_out = open('predictor.pkl','wb')
# pickle.dump(recommendations(""),pickle_out)
pickle.dump(coursedatas,pickle_out)
pickle_out.close()